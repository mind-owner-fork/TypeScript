=== tests/cases/conformance/types/typeParameters/typeArgumentLists/instantiationExpressionErrors.ts ===
declare let f: { <T>(): T, g<U>(): U };
>f : Symbol(f, Decl(instantiationExpressionErrors.ts, 0, 11))
>T : Symbol(T, Decl(instantiationExpressionErrors.ts, 0, 18))
>T : Symbol(T, Decl(instantiationExpressionErrors.ts, 0, 18))
>g : Symbol(g, Decl(instantiationExpressionErrors.ts, 0, 26))
>U : Symbol(U, Decl(instantiationExpressionErrors.ts, 0, 29))
>U : Symbol(U, Decl(instantiationExpressionErrors.ts, 0, 29))

// Type arguments in member expressions

const a1 = f<number>;  // { (): number; g<U>(): U; }
>a1 : Symbol(a1, Decl(instantiationExpressionErrors.ts, 4, 5))
>f : Symbol(f, Decl(instantiationExpressionErrors.ts, 0, 11))

const a2 = f.g<number>;  // () => number
>a2 : Symbol(a2, Decl(instantiationExpressionErrors.ts, 5, 5))
>f.g : Symbol(g, Decl(instantiationExpressionErrors.ts, 0, 26))
>f : Symbol(f, Decl(instantiationExpressionErrors.ts, 0, 11))
>g : Symbol(g, Decl(instantiationExpressionErrors.ts, 0, 26))

const a3 = f<number>.g;  // <U>() => U
>a3 : Symbol(a3, Decl(instantiationExpressionErrors.ts, 6, 5))
>f<number>.g : Symbol(g, Decl(instantiationExpressionErrors.ts, 0, 26))
>f : Symbol(f, Decl(instantiationExpressionErrors.ts, 0, 11))
>g : Symbol(g, Decl(instantiationExpressionErrors.ts, 0, 26))

const a4 = f<number>.g<number>;  // () => number
>a4 : Symbol(a4, Decl(instantiationExpressionErrors.ts, 7, 5))
>f<number>.g : Symbol(g, Decl(instantiationExpressionErrors.ts, 0, 26))
>f : Symbol(f, Decl(instantiationExpressionErrors.ts, 0, 11))
>g : Symbol(g, Decl(instantiationExpressionErrors.ts, 0, 26))

const a5 = f['g']<number>;  // () => number
>a5 : Symbol(a5, Decl(instantiationExpressionErrors.ts, 8, 5))
>f : Symbol(f, Decl(instantiationExpressionErrors.ts, 0, 11))
>'g' : Symbol(g, Decl(instantiationExpressionErrors.ts, 0, 26))

// `[` is an expression starter and cannot immediately follow a type argument list

const a6 = f<number>['g'];  // Error
>a6 : Symbol(a6, Decl(instantiationExpressionErrors.ts, 12, 5))
>f : Symbol(f, Decl(instantiationExpressionErrors.ts, 0, 11))

const a7 = (f<number>)['g'];
>a7 : Symbol(a7, Decl(instantiationExpressionErrors.ts, 13, 5))
>f : Symbol(f, Decl(instantiationExpressionErrors.ts, 0, 11))
>'g' : Symbol(g, Decl(instantiationExpressionErrors.ts, 0, 26))

// An `<` cannot immediately follow a type argument list

const a8 = f<number><number>;  // Relational operator error
>a8 : Symbol(a8, Decl(instantiationExpressionErrors.ts, 17, 5))
>f : Symbol(f, Decl(instantiationExpressionErrors.ts, 0, 11))

const a9 = (f<number>)<number>;  // Error, no applicable signatures
>a9 : Symbol(a9, Decl(instantiationExpressionErrors.ts, 18, 5))
>f : Symbol(f, Decl(instantiationExpressionErrors.ts, 0, 11))

// Type arguments with `?.` token

const b1 = f?.<number>;  // Error, `(` expected
>b1 : Symbol(b1, Decl(instantiationExpressionErrors.ts, 22, 5))
>f : Symbol(f, Decl(instantiationExpressionErrors.ts, 0, 11))

const b2 = f?.<number>();
>b2 : Symbol(b2, Decl(instantiationExpressionErrors.ts, 23, 5))
>f : Symbol(f, Decl(instantiationExpressionErrors.ts, 0, 11))

const b3 = f<number>?.();
>b3 : Symbol(b3, Decl(instantiationExpressionErrors.ts, 24, 5))
>f : Symbol(f, Decl(instantiationExpressionErrors.ts, 0, 11))

const b4 = f<number>?.<number>();  // Error, expected no type arguments
>b4 : Symbol(b4, Decl(instantiationExpressionErrors.ts, 25, 5))
>f : Symbol(f, Decl(instantiationExpressionErrors.ts, 0, 11))

// Parsed as function call, even though this differs from JavaScript

const x1 = f<true>
>x1 : Symbol(x1, Decl(instantiationExpressionErrors.ts, 29, 5))
>f : Symbol(f, Decl(instantiationExpressionErrors.ts, 0, 11))

(true);

// Parsed as relational expression

const x2 = f<true>
>x2 : Symbol(x2, Decl(instantiationExpressionErrors.ts, 34, 5))
>f : Symbol(f, Decl(instantiationExpressionErrors.ts, 0, 11))

true;

// Parsed as instantiation expression

const x3 = f<true>;
>x3 : Symbol(x3, Decl(instantiationExpressionErrors.ts, 39, 5))
>f : Symbol(f, Decl(instantiationExpressionErrors.ts, 0, 11))

true;

